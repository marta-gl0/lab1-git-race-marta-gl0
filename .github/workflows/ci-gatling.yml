name: CI (build + gatling)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]    
  workflow_dispatch:
jobs:
  build-and-gatling:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run unit & integration tests
        run: ./gradlew test --no-daemon --info
        env:
          GRADLE_OPTS: "-Xmx2g"

      # Start Spring Boot app in background
      - name: Start Spring Boot app (background)
        run: |
          # Start app in background and save its PID
          ./gradlew bootRun --no-daemon &> bootrun.log & echo $! > .app.pid
          echo "BootRun PID: $(cat .app.pid)"
        env:
          GRADLE_OPTS: "-Xmx2g"

      # Wait for the app to be ready (poll endpoint)
      - name: Wait for application to be ready
        run: |
          set -e
          TIMEOUT=60
          SLEEP=2
          URL="http://localhost:8080/actuator/health"
          echo "Waiting for ${URL} (timeout ${TIMEOUT}s)..."
          SECONDS=0
          until curl -sSf "$URL" > /dev/null 2>&1; do
            sleep $SLEEP
            SECONDS=$((SECONDS + SLEEP))
            if [ $SECONDS -ge $TIMEOUT ]; then
              echo "Timed out waiting for ${URL}"
              echo "BootRun log:"
              tail -n +1 bootrun.log || true
              exit 1
            fi
            echo "Still waiting... ($SECONDS s)"
          done
          echo "Application ready!"

      # Run Gatling simulation (non-interactive). Replace the --simulation value as needed.
      - name: Run Gatling simulation
        id: gatling_run
        run: |
          set -o pipefail
          # Run a specific simulation class and scenario (non-interactive).
          # Adjust the simulation identifier to your class/scene name. Examples:
          #   com.GreetingHistorySimulation#HistoryRead
          #   com.GreetingHistorySimulation  (if default simulation is the one you want)
          ./gradlew gatlingRun --no-daemon --simulation "com.GreetingHistorySimulation" --info
        env:
          GRADLE_OPTS: "-Xmx3g"

      # Always upload Gatling report (even if prior step failed). Use if: always() to ensure upload.
      - name: Upload Gatling report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gatling-report
          path: build/reports/gatling/**

      # Also upload bootRun log for debugging
      - name: Upload bootRun log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bootrun-log
          path: bootrun.log

      # Kill the background app (best-effort)
      - name: Stop Spring Boot app
        if: always()
        run: |
          if [ -f .app.pid ]; then
            PID=$(cat .app.pid)
            echo "Killing PID $PID"
            kill $PID || true
            sleep 2
            # Force kill if still running
            if ps -p $PID > /dev/null 2>&1; then
              echo "Process still running, killing -9 $PID"
              kill -9 $PID || true
            fi
          else
            echo "No .app.pid found"
          fi
